// Copyright 2019 Google LLC
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

import 'package:path/path.dart' as p;
import 'package:sass/sass.dart';

import '../io.dart';

/// An importer that resolves URLs starting with `~` by searching in
/// `node_modules` directories.
///
/// This doesn't completely match Webpack's behavior (as it lacks the support
/// for configuring its behavior), but it should be good enough to run the
/// migrator with for most cases.
class NodeModulesImporter extends Importer {
  final _nodeModulesDirectories = <String>[];

  /// Constructs a new [NodeModulesImporter] that searches for `node_modules` in
  /// [baseDirectory] and all of its ancestors.
  ///
  /// If not provided, [baseDirectory] defaults to the current directory.
  NodeModulesImporter([Directory baseDirectory]) {
    var directory = baseDirectory ?? Directory.current;
    while (true) {
      var loadPath = p.join(directory.path, 'node_modules');
      if (Directory(loadPath).existsSync()) {
        _nodeModulesDirectories.add(loadPath);
      }
      var parent = p.dirname(directory.path);
      if (directory.path == parent) break;
      directory = Directory(parent);
    }
  }

  /// Canonicalizes [url] using this importer.
  ///
  /// If [url] starts with `~`, this searches all `node_modules` directories,
  /// using a [FilesystemImporter] to canonicalize to the real path on disk.
  ///
  /// If no matching stylesheet can be found, or if [url] does not start with
  /// `~`, this returns null.
  Uri canonicalize(Uri url) {
    var path = url.toFilePath();
    if (!path.startsWith('~') || path.startsWith('~/')) return null;
    url = url.replace(path: path.substring(1));
    for (var loadPath in _nodeModulesDirectories) {
      var result = FilesystemImporter(loadPath).canonicalize(url);
      if (result != null) return result;
    }
    return null;
  }

  /// Loads [url] using a [FilesystemImporter].
  ///
  /// [url] must be the canonical URL returned by [canonicalize].
  ImporterResult load(Uri url) => FilesystemImporter('.').load(url);
}

<==> arguments
--pessimistic --no-multiplication

<==> input/entrypoint.scss
@function six-divided-by-three() {
  @return 6px / 3px;
}

@function identity($x) {
  @return $x;
}

a {
  // Arithmetic on number literals
  b: (4px + 2px) / 3px;
  c: 6px/3px + 1;
  d: (6px / 3px);
  e: 6px / (2px + 1px) / 2;
  f: (6px / 3px * -1);
  $f: 6px / 3px;

  // * and % always return numbers, so we can assume division here
  g: (3 * $x) / 4;
  h: 3 / $x * 4;
  i: (3 % $x) / 4;
  j: 3 / $x % 4;

  // < and similar operators always operate on numbers
  k: 3 / $x < 1;
  l: 3 / $x > 1;
  m: 3 / $x <= 1;
  n: 3 / $x >= 1;

  // Function calls
  o: identity(6px / 3px);
  p: rgba(10, 20, 30/2, 0.5);
  q: rgb(10 20 30/2 / 0.5);

  // Negation
  r: -(4/3);
  s: (-4/3);
  t: -((-6/3) / -(4/2));
}

<==> output/entrypoint.scss
@use "sass:math";

@function six-divided-by-three() {
  @return math.div(6px, 3px);
}

@function identity($x) {
  @return $x;
}

a {
  // Arithmetic on number literals
  b: math.div(4px + 2px, 3px);
  c: math.div(6px, 3px) + 1;
  d: math.div(6px, 3px);
  e: math.div(math.div(6px, 2px + 1px), 2);
  f: (math.div(6px, 3px) * -1);
  $f: math.div(6px, 3px);

  // * and % always return numbers, so we can assume division here
  g: math.div(3 * $x, 4);
  h: math.div(3, $x) * 4;
  i: math.div(3 % $x, 4);
  j: math.div(3, $x) % 4;

  // < and similar operators always operate on numbers
  k: math.div(3, $x) < 1;
  l: math.div(3, $x) > 1;
  m: math.div(3, $x) <= 1;
  n: math.div(3, $x) >= 1;

  // Function calls
  o: identity(math.div(6px, 3px));
  p: rgba(10, 20, math.div(30, 2), 0.5);
  q: rgb(10, 20, math.div(30, 2), 0.5);

  // Negation
  r: -(math.div(4, 3));
  s: math.div(-4, 3);
  t: -(math.div(math.div(-6, 3), -(math.div(4, 2))));
}
